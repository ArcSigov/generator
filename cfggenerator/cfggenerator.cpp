#include "cfggenerator.h"

BaseCfgGen::BaseCfgGen(const QString& _outdir, const QString& blockname )
{
    load_outdir = _outdir;
    outdir = _outdir;
    rs_position = 1;
    cfg_file.setFileName(outdir + "/cfg_"+blockname+".c" );
    sw_txt_file.setFileName(outdir +"/sw_load_"+ blockname+".txt");
    rs_txt_file.setFileName(outdir +"/rs_load_"+ blockname+".txt");
    cfg_file.open(QIODevice::ReadWrite | QIODevice::Truncate);
    sw_txt_file.open(QIODevice::ReadWrite | QIODevice::Truncate);
    rs_txt_file.open(QIODevice::ReadWrite | QIODevice::Truncate);
    cfg_file.write("                /*WARNING !!! -> THIS FILE IS GENERATED AUTOMATICALLY. DO NOT EDIT THIS FILE MANUALLY <- WARNING !!!*/\r\n\r\n");
    cfg_file.write("typedef struct{\r\n");
    cfg_file.write("    unsigned short GA;\r\n");
    cfg_file.write("    unsigned short LA;\r\n");
    cfg_file.write("    unsigned long kernel_addr_rom;\r\n");
    cfg_file.write("    unsigned long kernel_addr_ram;\r\n");
    cfg_file.write("    unsigned long kernel_size;\r\n");
    cfg_file.write("    unsigned long config_addr_rom;\r\n");
    cfg_file.write("    unsigned long config_addr_ram;\r\n");
    cfg_file.write("    unsigned long config_size;\r\n");
    cfg_file.write("    unsigned long part1_addr_rom;\r\n");
    cfg_file.write("    unsigned long part1_addr_ram;\r\n");
    cfg_file.write("    unsigned long part1_size;\r\n");
    cfg_file.write("    unsigned long part2_addr_rom;\r\n");
    cfg_file.write("    unsigned long part2_addr_ram;\r\n");
    cfg_file.write("    unsigned long part2_size;\r\n");
    cfg_file.write("    unsigned long part3_addr_rom;\r\n");
    cfg_file.write("    unsigned long part3_addr_ram;\r\n");
    cfg_file.write("    unsigned long part3_size;\r\n");
    cfg_file.write("}SoftLoad;\r\n\r\n\r\n");
    cfg_file.write("const SoftLoad conf_info[]  =\r\n");
    cfg_file.write("{\r\n");
    cfg_file.write("    /*   module    --------  kernel --------------- ---------- config -------------- ------------ app 1 ------------- ------------ app 2 ------------- ------------ app 3 ------------- */\r\n");
}

BaseCfgGen::~BaseCfgGen()
{
    cfg_file.close();
    sw_txt_file.close();
    rs_txt_file.close();
}

void BaseCfgGen::SetOutputDir(const QString& outdir)
{
    load_outdir = outdir;
}

void BaseCfgGen::Add        (const QString& file_path, const QString& la,
                             const QString& ram_addr,  const L_FILE& type,
                             const size_t& file_size,  const size_t& part_num)
{
    std::vector<QString> la_addr;
    la_addr.push_back("0x00"+la.left(2));
    if (la.length() == 5) la_addr.push_back("0x00"+la.mid(3,2));
    for (auto it =la_addr.begin() ; it != la_addr.end() ; it++)
    {
        for (auto pos = table.begin(); pos != table.end() ; pos++)
        {
            if (*it == pos->LA)
            {
                switch(type)
                {
                    case L_FILE::BINARY:
                        WriteToPart(std::distance(table.begin(),pos),part_num,ram_addr,file_size);
                        break;
                    case L_FILE::CONFIG:
                        WriteToCfg(std::distance(table.begin(),pos),ram_addr,file_size);
                        break;
                }
                break;
            }
        }
    }
    WriteToSwFile(QString::number(base_rom_addr,16) +" " + load_outdir + QFileInfo(file_path).baseName() + (type == L_FILE::BINARY ? ".sre" : ".mot"));
    WriteToRsFile(QString::number(base_rom_addr,16) +" " + load_outdir + QFileInfo(file_path).baseName() + (type == L_FILE::BINARY ? ".sre" : ".mot"));
    NextSector(file_size);
}

void BaseCfgGen::WriteToTable()
{
    QTextStream out(&cfg_file);
    for (auto i = 0ull ; i < table.size(); i++)
    {
        out << "    {" << table[i].GA << "," << table[i].LA << ","
            << table[i].kernel_addr_rom  << "," << table[i].kernel_addr_ram  << "," << table[i].kernel_size << ","
            << table[i].config_addr_rom  << "," << table[i].config_addr_ram  << "," << table[i].config_size << ","
            << table[i].part_addr_rom[0] << "," << table[i].part_addr_ram[0] << "," << table[i].part_size[0] << ","
            << table[i].part_addr_rom[1] << "," << table[i].part_addr_ram[1] << "," << table[i].part_size[1] << ","
            << table[i].part_addr_rom[2] << "," << table[i].part_addr_ram[2] << "," << table[i].part_size[2] << "},\r\n";
    }
    out << "};";
}

void BaseCfgGen::MakeStr(QString &str, const size_t &val, const size_t &null_count)
{
    str = QString::number(val,16);
    while (static_cast<size_t>(str.length()) != null_count) str.push_front('0');
    str.push_front("0x");
}
void BaseCfgGen::WriteToSwFile(const QString& file)
{
    sw_txt_file.write(QString("1 1 25 a0040000 f " + file + "\r\n").toStdString().c_str());
    sw_txt_file.write(QString("1 1 25 a0040000 0 " + file + "\r\n").toStdString().c_str());
    sw_txt_file.write(QString("10 1 49 a0040000 f " + file + "\r\n").toStdString().c_str());
    sw_txt_file.write(QString("10 1 49 a0040000 0 " + file + "\r\n").toStdString().c_str());
}

void BaseCfgGen::WriteToRsFile(const QString &file_name)
{
    rs_data.push_back(QString::number(rs_position++) + " 0 " + file_name + "\r\n");
}

void BaseCfgGen::NextSector(const size_t& file_size)
{
    if (file_size < 0x40000)
    {
        base_rom_addr+=0x40000;
    }
    else
    {
        int _size = file_size;
        while (_size > 0)
        {
            base_rom_addr+=0x40000;
            _size-=0x40000;
        }
    }
}

void BaseCfgGen::WriteToCfg(const size_t& module_num,const QString& ram_addr,const size_t& size)
{
    table[module_num].config_addr_ram = "0x"+ram_addr;
    table[module_num].config_addr_rom = "0x"+QString::number(base_rom_addr,16);
    MakeStr(table[module_num].config_size,size,8);
}

void BaseCfgGen::WriteToPart(const size_t& module_num,const size_t& part_num,const QString& ram_addr,const size_t& size)
{
    table[module_num].part_addr_ram[part_num-1] = "0x"+ram_addr;
    table[module_num].part_addr_rom[part_num-1] = "0x"+QString::number(base_rom_addr,16);
    MakeStr(table[module_num].part_size[part_num-1],size,8);
}

void BaseCfgGen::RunBatch()
{
    QDir dir;
    dir.mkpath("out/cfg/obj");
    QFile batch("out/cfg/make_"+QFileInfo(cfg_file).baseName()+".bat");
    if (batch.open(QIODevice::WriteOnly|QIODevice::Truncate))
    {
        QTextStream stream(&batch);
        stream << QDir::currentPath() << "/Tools4x/bin/mipsel-elf32-gcc.exe -g -c -O0 -EL  -o " << QDir::currentPath()+"/out/cfg/obj/" << "cfg_files.o "  + QFileInfo(cfg_file).absoluteFilePath() + "\r\n";
        stream << "cd " << QDir::currentPath()+"/out/cfg/obj" << "\r\n";
        stream << QDir::currentPath() << "/Tools4x/bin/mipsel-elf32-ld.exe  -d  -g -EL -T " << QDir::currentPath() <<  (QFileInfo(cfg_file).baseName() == "cfg_bgs" ? "/bgs_comline_rom.cmd" : "/comline_rom.cmd") << "\r\n";
        stream << "copy cfg_files.mot " << '"' << outdir + QFileInfo(cfg_file).baseName() + ".mot" << '"' << "\r\n";
    }
    batch.close();
    std::system(("cmd.exe /C " + QDir::currentPath().toStdString() + "/out/cfg/make_" + QFileInfo(cfg_file).baseName().toStdString() + ".bat").c_str());
}

BisCfgGen::BisCfgGen(const QString& outdir) : BaseCfgGen(outdir,"bis")
{
    base_rom_addr = 0xb0200000;
    table.emplace_back("0x0001","0x0025","0xb0000000");
    table.emplace_back("0x0002","0x0029","0xb0080000");
    table.emplace_back("0x0003","0x002d","0xb0100000");
    table.emplace_back("0x0004","0x0031","0xb0100000");
    table.emplace_back("0x0005","0x0035","0xb0100000");
    table.emplace_back("0x0006","0x0039","0xb0100000");
    table.emplace_back("0x0007","0x003d","0xb0100000");
    table.emplace_back("0x0008","0x0041","0xb0100000");
    table.emplace_back("0x0009","0x0045","0xb0080000");
    table.emplace_back("0x000A","0x0049","0xb0000000");
}

#include <iostream>

BisCfgGen::~BisCfgGen()
{
    sw_txt_file.write(QString("1 1 25 a0040000 f 00000000 " +load_outdir+"cfg_bis.mot\r\n").toStdString().c_str());
    sw_txt_file.write(QString("1 1 25 a0040000 0 00000000 " +load_outdir+"cfg_bis.mot\r\n").toStdString().c_str());
    sw_txt_file.write(QString("10 1 49 a0040000 f 00000000 " +load_outdir+"cfg_bis.mot\r\n").toStdString().c_str());
    sw_txt_file.write(QString("10 1 49 a0040000 0 00000000 " +load_outdir+"cfg_bis.mot\r\n").toStdString().c_str());

    rs_data.push_front("0 f b0200000-" + QString::number(base_rom_addr,16)+"\r\n");
    rs_data.push_back(QString::number(rs_position++) + " f b7f80000\r\n");
    rs_data.push_back(QString::number(rs_position++) + " 0 00000000 "+ load_outdir + "cfg_bis.mot\r\n");
    rs_txt_file.write(rs_data.toStdString().c_str());
}

BcvmCfgGen::BcvmCfgGen(const QString& outdir) : BaseCfgGen(outdir,"bcvm")
{
    base_rom_addr = 0xb0200000;
    table.emplace_back("0x0001","0x0025","0xb0000000");
    table.emplace_back("0x0002","0x0029","0xb0180000");
    table.emplace_back("0x0002","0x002a","0xb0180000");
    table.emplace_back("0x0003","0x002d","0xb0080000");
    table.emplace_back("0x0004","0x0031","0xb0080000");
    table.emplace_back("0x0005","0x0035","0xb0100000");
    table.emplace_back("0x0006","0x0039","0xb0100000");
    table.emplace_back("0x0007","0x003d","0xb0080000");
    table.emplace_back("0x0008","0x0041","0xb0080000");
    table.emplace_back("0x0009","0x0045","0xb0080000");
    table.emplace_back("0x000A","0x0049","0xb0000000");
}

BcvmCfgGen::~BcvmCfgGen()
{
    sw_txt_file.write(QString("1 1 25 a0040000 f 00000000 " +load_outdir+"cfg_bcvm.mot\r\n").toStdString().c_str());
    sw_txt_file.write(QString("1 1 25 a0040000 0 00000000 " +load_outdir+"cfg_bcvm.mot\r\n").toStdString().c_str());
    sw_txt_file.write(QString("10 1 49 a0040000 f 00000000 " +load_outdir+"cfg_bcvm.mot\r\n").toStdString().c_str());
    sw_txt_file.write(QString("10 1 49 a0040000 0 00000000 " +load_outdir+"cfg_bcvm.mot\r\n").toStdString().c_str());

    rs_data.push_front("0 f b0200000-" + QString::number(base_rom_addr,16)+"\r\n");
    rs_data.push_back(QString::number(rs_position++) + " f b7f80000\r\n");
    rs_data.push_back(QString::number(rs_position++) + " 0 00000000 "+ load_outdir + "cfg_bcvm.mot\r\n");
    rs_txt_file.write(rs_data.toStdString().c_str());
}

BgsCfgGen::BgsCfgGen(const QString& outdir) : BaseCfgGen(outdir,"bgs")
{
    base_rom_addr = 0xbc200000;
    table.emplace_back("0x0001","0x0025","0xbc000000");
    table.emplace_back("0x0001","0x0026","0xbc000000");
    table.emplace_back("0x0002","0x0029","0xbc700000");
    table.emplace_back("0x0003","0x002d","0xbc800000");
    table.emplace_back("0x0003","0x002e","0xbc800000");
    table.emplace_back("0x0004","0x0031","0xbc800000");
    table.emplace_back("0x0004","0x0032","0xbc800000");
    table.emplace_back("0x0005","0x0035","0xbc800000");
    table.emplace_back("0x0005","0x0036","0xbc800000");
    table.emplace_back("0x0006","0x0039","0xbc800000");
    table.emplace_back("0x0006","0x003a","0xbc800000");
    table.emplace_back("0x0007","0x003d","0xbc800000");
    table.emplace_back("0x0007","0x003e","0xbc800000");
    table.emplace_back("0x0008","0x0041","0xbc800000");
    table.emplace_back("0x0008","0x0042","0xbc800000");
    table.emplace_back("0x0009","0x0045","0xbc700000");
    table.emplace_back("0x000A","0x0049","0xbc100000");

    table[2].kernel_size = "0x00020000";
    table[15].kernel_size = "0x00020000";
}
BgsCfgGen::~BgsCfgGen()
{

    sw_txt_file.write(QString("1 1 25 a0040000 f 00000000 " +load_outdir+"cfg_bgs.mot\r\n").toStdString().c_str());
    sw_txt_file.write(QString("1 2 26 a0040000 f 00000000 " +load_outdir+"cfg_bgs.mot\r\n").toStdString().c_str());
    sw_txt_file.write(QString("1 1 25 a0040000 0 00000000 " +load_outdir+"cfg_bgs.mot\r\n").toStdString().c_str());
    sw_txt_file.write(QString("1 2 26 a0040000 0 00000000 " +load_outdir+"cfg_bgs.mot\r\n").toStdString().c_str());

    rs_data.push_front("0 f bc200000-" + QString::number(base_rom_addr,16)+"\r\n");
    rs_data.push_back(QString::number(rs_position++) + " f bfc80000\r\n");
    rs_data.push_back(QString::number(rs_position++) + " 0 00000000 "+ load_outdir + "cfg_bgs.mot\r\n");
    rs_txt_file.write(rs_data.toStdString().c_str());
}

void BgsCfgGen::WriteToSwFile(const QString &file)
{
    sw_txt_file.write(QString("1 1 25 a0040000 f " + file + "\r\n").toStdString().c_str());
    sw_txt_file.write(QString("1 1 25 a0040000 0 " + file + "\r\n").toStdString().c_str());
    sw_txt_file.write(QString("1 2 26 a0040000 f " + file + "\r\n").toStdString().c_str());
    sw_txt_file.write(QString("1 2 26 a0040000 0 " + file + "\r\n").toStdString().c_str());
}


