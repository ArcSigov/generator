#ifndef CFGINTERPRETER_H
#define CFGINTERPRETER_H

#include "dataprocessor.h"

enum class BlockType
{
    undef,
    bis,
    bgs,
    bcvm
};


struct SoftLoad
{
    unsigned short GA{0};
    unsigned short LA{0};
    unsigned long kernel_addr_rom{0};
    unsigned long kernel_addr_ram{0xa0040000};
    unsigned long kernel_size{0x50000};
    unsigned long config_addr_rom{0};
    unsigned long config_addr_ram{0xa00a0000};
    unsigned long config_size{0};
    unsigned long part_addr_rom[3]{0,0,0};
    unsigned long part_addr_ram[3]{0,0,0};
    unsigned long part_size[3]{0,0,0};
    SoftLoad() = default;
    SoftLoad( unsigned short _GA, unsigned short _LA, unsigned long _kernel_addr_rom) :
             GA(_GA),
             LA(_LA),
             kernel_addr_rom(_kernel_addr_rom)
            {

            }

    SoftLoad& operator = (const SoftLoad& other)
    {
        if (this != &other)
        {
            if (other.config_addr_rom) config_addr_rom   = other.config_addr_rom;
            if (other.config_size)     config_size       = other.config_size;

            for (auto i = 0 ; i < 3 ; i++)
            {
                if (other.part_addr_ram[i]) this->part_addr_ram[i] = other.part_addr_ram[i];
                if (other.part_addr_rom[i]) this->part_addr_rom[i] = other.part_addr_rom[i];
                if (other.part_size[i])     this->part_size[i]     = other.part_size[i];
            }
        }
        return *this;
    }
};

class BlockCfg
{   
public:
    BlockCfg() = default;
    virtual ~BlockCfg() = default;
    virtual SoftLoad makeCfg(const size_t& pos = 0, const size_t& size  = 0, const size_t& ram_addr = 0, const bool& is_part = false, const size_t& npart = 0) = 0;
};

class BisCfg: public BlockCfg
{
public:
    BisCfg()  = default;
    ~BisCfg() = default;
    SoftLoad makeCfg(const size_t& pos = 0, const size_t& size  = 0, const size_t& ram_addr = 0, const bool& is_part = false, const size_t& npart = 0)  override;
};

class BcvmCfg: public BlockCfg
{
public:
    BcvmCfg()  = default;
    ~BcvmCfg() = default;
    SoftLoad makeCfg(const size_t& pos = 0, const size_t& size  = 0, const size_t& ram_addr = 0, const bool& is_part = false, const size_t& npart = 0)  override {}
};

class BgsCfg: public BlockCfg
{
public:
    BgsCfg() = default;
    ~BgsCfg() = default;
    SoftLoad makeCfg(const size_t& pos = 0, const size_t& size  = 0, const size_t& ram_addr = 0, const bool& is_part = false, const size_t& npart = 0)  override {}
};

class CfgDataProcessor : public DataProcessor
{
     QString file_header =                  "/*WARNING !!! -> THIS FILE IS GENERATED AUTOMATICALLY. DO NOT EDIT THIS FILE MANUALLY <- WARNING !!!*/\r\n\r\n \
                                            typedef struct{\r\n                                                                                             \
                                            unsigned short GA;\r\n                                                                                          \
                                            unsigned short LA;\r\n                                                                                          \
                                            unsigned long kernel_addr_rom;\r\n                                                                              \
                                            unsigned long kernel_addr_ram;\r\n                                                                              \
                                            unsigned long kernel_size;\r\n                                                                                  \
                                            unsigned long config_addr_rom;\r\n                                                                              \
                                            unsigned long config_addr_ram;\r\n                                                                              \
                                            unsigned long config_size;\r\n                                                                                  \
                                            unsigned long part1_addr_rom;\r\n                                                                               \
                                            unsigned long part1_addr_ram;\r\n                                                                               \
                                            unsigned long part1_size;\r\n                                                                                   \
                                            unsigned long part2_addr_rom;\r\n                                                                               \
                                            unsigned long part2_addr_ram;\r\n                                                                               \
                                            unsigned long part2_size;\r\n                                                                                   \
                                            unsigned long part3_addr_rom;\r\n                                                                               \
                                            unsigned long part3_addr_ram;\r\n                                                                               \
                                            unsigned long part3_size;\r\n                                                                                   \
                                            }SoftLoad;\r\n\r\n\r\n                                                                                          \
                                            const SoftLoad conf_info[]  =\r\n                                                                               \
                                            {\r\n                                                                                                           \
                                            /*   module    --------  kernel --------------- ---------- config -------------- ------------ app 1 ------------- ------------ app 2 ------------- ------------ app 3 ------------- */\r\n";
public:
    CfgDataProcessor();
    ~CfgDataProcessor() = default;
    virtual void process() override;
    void setBlockType(const BlockType& = BlockType::undef);
private:
    std::unique_ptr<BlockCfg>                     block;
    std::map<size_t,SoftLoad>                     cfglist;
    BlockType                                     type;
};





#endif
